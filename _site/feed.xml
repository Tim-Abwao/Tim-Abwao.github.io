<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-03-17T15:18:32+03:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">How To Connect To Postgresql Databases From Python</title><link href="http://localhost:4000/2019/10/02/How-To-Connect-To-PostgreSQL-Databases-From-Python/" rel="alternate" type="text/html" title="How To Connect To Postgresql Databases From Python" /><published>2019-10-02T00:00:00+03:00</published><updated>2019-10-02T00:00:00+03:00</updated><id>http://localhost:4000/2019/10/02/How-To-Connect-To-PostgreSQL-Databases-From-Python</id><content type="html" xml:base="http://localhost:4000/2019/10/02/How-To-Connect-To-PostgreSQL-Databases-From-Python/">&lt;p&gt;&lt;a href=&quot;https://www.postgresql.org&quot;&gt;PostgreSQL&lt;/a&gt; is a &lt;strong&gt;fast&lt;/strong&gt; and &lt;strong&gt;reliable&lt;/strong&gt; &lt;a href=&quot;https://database.guide/what-is-an-ordbms&quot;&gt;object-relational database management system&lt;/a&gt;. It can hold databases as large as 32TB, with virtually unlimited rows. This makes it an ideal choice for many companies needing to store and access huge volumes of data. What is more, it’s &lt;strong&gt;open source&lt;/strong&gt;(free).&lt;/p&gt;

&lt;h2 id=&quot;psycopg2---pythons-vessel-into-postgres&quot;&gt;Psycopg2 - Python’s Vessel into Postgres&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://initd.org/psycopg/docs&quot;&gt;Psycopg&lt;/a&gt; is a &lt;strong&gt;robust&lt;/strong&gt; Python adaptor for PostgreSQL. It enables Python programs to connect to PostgreSQL servers, create databases, and run various &lt;a href=&quot;http://www.sqlcourse.com/intro.html&quot;&gt;SQL&lt;/a&gt; queries and operations.&lt;/p&gt;

&lt;p&gt;The Psycopg official website states that “&lt;em&gt;It (Psycopg) was designed for heavily multi-threaded applications that create and destroy lots of cursors and make a large number of concurrent INSERTs or UPDATEs.&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;Example use-cases include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Storing users’ account/transaction/etc info to Postgres databases from flask/django websites &amp;amp; blogs.&lt;/li&gt;
  &lt;li&gt;Extracting data from Postgres databases for automated, Python-based data analysis and report-generating apps, among others.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Please see &lt;a href=&quot;https://www.psycopg.org/docs/install.html&quot;&gt;Installation&lt;/a&gt; for the various ways to install Psycopg2.&lt;/p&gt;

&lt;p&gt;Generally, if you already have PostgreSQL and Python installed, then&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;psycopg2

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;should do the trick.&lt;/p&gt;

&lt;p&gt;Afterwards, head on to the &lt;a href=&quot;https://www.psycopg.org/docs/usage.html&quot;&gt;Basic Module Usage&lt;/a&gt; page for an introduction on how to use it. For instance, to connect to a database named &lt;em&gt;database1&lt;/em&gt; on a locally running Postgres server as the user &lt;em&gt;user1&lt;/em&gt;, and obtain data; try the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dbname=database1 user=user1 password=user1password host=localhost &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Open a cursor to perform database operations
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Execute a command: query data from table1 in the database 
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM table1;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Save the data to a variable called 'data'
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can explore these and more features of Psycopg2 using &lt;a href=&quot;https://github.com/Tim-Abwao/Psycopg2-Basics/blob/master/PostgreSQL%20Basics%20with%20Psycopg2.ipynb&quot;&gt;this jupyter notebook&lt;/a&gt;.&lt;/p&gt;</content><author><name>Abwao</name></author><summary type="html">PostgreSQL is a fast and reliable object-relational database management system. It can hold databases as large as 32TB, with virtually unlimited rows. This makes it an ideal choice for many companies needing to store and access huge volumes of data. What is more, it’s open source(free).</summary></entry><entry><title type="html">Making A Flask Web App To Explore Statistical Distributions</title><link href="http://localhost:4000/2019/09/18/Making-a-Flask-Web-App-To-Explore-Statistical-Distributions/" rel="alternate" type="text/html" title="Making A Flask Web App To Explore Statistical Distributions" /><published>2019-09-18T00:00:00+03:00</published><updated>2019-09-18T00:00:00+03:00</updated><id>http://localhost:4000/2019/09/18/Making-a-Flask-Web-App-To-Explore-Statistical-Distributions</id><content type="html" xml:base="http://localhost:4000/2019/09/18/Making-a-Flask-Web-App-To-Explore-Statistical-Distributions/">&lt;p&gt;&lt;a href=&quot;https://palletsprojects.com/p/flask/&quot;&gt;Flask&lt;/a&gt; is a “&lt;strong&gt;lightweight… web app framework&lt;/strong&gt;” for Python. It is designed to be &lt;strong&gt;simple&lt;/strong&gt; and basic; thus making it easy to learn, while simultaneously allowing experienced web developers the freedom to integrate custom/preferred features.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Anyone with experience (or just interest) in Python and web applications can have a simple Flask app up and running in a matter of minutes with the help of the &lt;a href=&quot;https://flask.palletsprojects.com/en/1.1.x/quickstart/#quickstart&quot;&gt;Flask quickstart guide&lt;/a&gt;, which introduces Flask’s main features.&lt;/p&gt;

&lt;p&gt;Flask’s documentation also features a &lt;a href=&quot;https://flask.palletsprojects.com/en/1.1.x/tutorial/#tutorial&quot;&gt;tutorial&lt;/a&gt; with a step-by-step guide to building a blog.&lt;/p&gt;

&lt;p&gt;Flask can make wonderful dynamic websites, and interactive applications; but this will require at least a fairly good understanding of HTML, CSS and JavaScript. &lt;a href=&quot;https://www.w3schools.com&quot;&gt;W3Schools&lt;/a&gt; and &lt;a href=&quot;https://getbootstrap.com&quot;&gt;Bootstrap&lt;/a&gt; can be a real help for absolute beginners.&lt;/p&gt;

&lt;h2 id=&quot;statistical-distributions-app&quot;&gt;Statistical Distributions App&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://statistics-distributions.herokuapp.com&quot;&gt;This&lt;/a&gt; is a flask app designed to allow users to choose from among some common statistical distributions, and learn some basic facts about them. Please, go through the &lt;a href=&quot;https://flask.palletsprojects.com/en/1.1.x/quickstart/#quickstart&quot;&gt;Flask quickstart guide&lt;/a&gt;, if you haven’t yet. Afterwards, if you wish, you can run the app yourself. The code for the app is available 
&lt;a href=&quot;https://github.com/Tim-Abwao/statistical-distributions-flask&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Abwao</name></author><summary type="html">Flask is a “lightweight… web app framework” for Python. It is designed to be simple and basic; thus making it easy to learn, while simultaneously allowing experienced web developers the freedom to integrate custom/preferred features.</summary></entry><entry><title type="html">Simple Text Mining Using Spacy Nlp</title><link href="http://localhost:4000/2019/09/05/Simple-Text-Mining-Using-SpaCy-NLP/" rel="alternate" type="text/html" title="Simple Text Mining Using Spacy Nlp" /><published>2019-09-05T00:00:00+03:00</published><updated>2019-09-05T00:00:00+03:00</updated><id>http://localhost:4000/2019/09/05/Simple-Text-Mining-Using-SpaCy-NLP</id><content type="html" xml:base="http://localhost:4000/2019/09/05/Simple-Text-Mining-Using-SpaCy-NLP/">&lt;p&gt;&lt;a href=&quot;https://spacy.io/&quot;&gt;spaCy&lt;/a&gt; is a &lt;strong&gt;powerful&lt;/strong&gt;, &lt;strong&gt;convenient&lt;/strong&gt;, open source &lt;strong&gt;Natural Language Processing (NLP)&lt;/strong&gt; Python package built by &lt;a href=&quot;https://explosion.ai/&quot;&gt;Explosions AI&lt;/a&gt;. It is excellent for quickly processing large volumes of text and picking out information about the entities (people/places/organisations/etc) present. It also has wonderful text visualisation tools, demonstrated &lt;a href=&quot;https://explosion.ai/demos/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;linguistic-features&quot;&gt;Linguistic Features&lt;/h2&gt;
&lt;p&gt;Some of spaCy’s &lt;a href=&quot;https://spacy.io/usage/spacy-101#features&quot;&gt;main features&lt;/a&gt; include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tokenization:&lt;/strong&gt; splitting text into pieces (i.e words, numbers, punctuation marks, etc) termed ‘tokens’.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Part-of-Speech Tagging:&lt;/strong&gt; classifying the tokens according to their &lt;em&gt;syntactic functions&lt;/em&gt;, as nouns/verbs/conjunctions/determiners/etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Named Entity Recognition:&lt;/strong&gt; getting the names, places, organisations, dates, events, landmark structures, nationalities, languages, etc. in the text. Please see &lt;a href=&quot;https://spacy.io/api/annotation#named-entities&quot;&gt;Named Entities&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sentiment Analysis:&lt;/strong&gt; gives the positivity/negativity score for a phrase/sentence/document.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Lemmatization:&lt;/strong&gt; getting the root/base form of the tokens, without inflections for tense/plural/case/gender/ etc. This allows words like ‘was’ and ‘be’ to be interpreted as similar.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dependency Parsing:&lt;/strong&gt; getting the grammatical structure i.e relationships between the tokens in terms of ‘subject’ or ‘object’ in the given contexts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sentence Boundary Detection:&lt;/strong&gt; getting the sentences in the text (grouping together tokens that make up individual sentences by identifying where sentences begin and end).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Installation instructions can be found at &lt;a href=&quot;https://spacy.io/usage&quot;&gt;spaCy’s usage guide&lt;/a&gt;. The form there helps configure your install for a particular Operating System, Python Package Manager, Python version, Language and a few extra options.&lt;/p&gt;

&lt;p&gt;Spacy has its very own &lt;a href=&quot;https://course.spacy.io&quot;&gt;Advanced NLP with spaCy course&lt;/a&gt; which &lt;em&gt;exlains&lt;/em&gt; and &lt;em&gt;demonstrates&lt;/em&gt; its more advanced features. The included &lt;em&gt;practice sessions&lt;/em&gt; let you see it in action. This is probably the best way to learn what spaCy is all about.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;If you’re interested in trying spaCy out for yourself, you can download and test  &lt;a href=&quot;https://github.com/Tim-Abwao/spaCy-Text-App&quot;&gt;this simple NLP app&lt;/a&gt;. It’s intended to extract text from documents in a multitude of formats, and derive named-entity information. Feel free to make adjustments and improvements.&lt;/p&gt;</content><author><name>Abwao</name></author><summary type="html">spaCy is a powerful, convenient, open source Natural Language Processing (NLP) Python package built by Explosions AI. It is excellent for quickly processing large volumes of text and picking out information about the entities (people/places/organisations/etc) present. It also has wonderful text visualisation tools, demonstrated here.</summary></entry><entry><title type="html">Create A Simple Chatbot To Tell Jokes &amp;amp; Random Facts</title><link href="http://localhost:4000/2019/08/28/Create-a-Simple-Chatbot-to-tell-Jokes-&-Random-Facts/" rel="alternate" type="text/html" title="Create A Simple Chatbot To Tell Jokes &amp; Random Facts" /><published>2019-08-28T00:00:00+03:00</published><updated>2019-08-28T00:00:00+03:00</updated><id>http://localhost:4000/2019/08/28/Create-a-Simple-Chatbot-to-tell-Jokes-&amp;-Random-Facts</id><content type="html" xml:base="http://localhost:4000/2019/08/28/Create-a-Simple-Chatbot-to-tell-Jokes-&amp;-Random-Facts/">&lt;p&gt;&lt;a href=&quot;https://rasa.com/&quot;&gt;Rasa&lt;/a&gt; is an &lt;a href=&quot;https://opensource.com/resources/what-open-source&quot;&gt;open source&lt;/a&gt; Python package with easy-to-use tools for building intelligent text and voice based chatbots. It features several &lt;em&gt;machine learning&lt;/em&gt;, &lt;em&gt;natural language processing&lt;/em&gt; and &lt;em&gt;natural language understanding&lt;/em&gt; tools to produce smart, life-like chatbots.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Please check out the &lt;a href=&quot;https://rasa.com/docs/rasa/user-guide/installation/#installation-guide&quot;&gt;step-by-step installation guide&lt;/a&gt; for platform-specific instructions. This &lt;a href=&quot;https://rasa.com/docs/getting-started/&quot;&gt;getting started guide&lt;/a&gt; installs Rasa and creates a basic chatbot (Rasa project) that you can try out right away.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://rasa.com/docs/rasa/user-guide/rasa-tutorial/&quot;&gt;Rasa Tutorial&lt;/a&gt; is the best way to get acquainted with how Rasa works. It defines the fundamental files required to build chatbots, and their varied formats.&lt;/p&gt;

&lt;h2 id=&quot;anatomy-of-the-chatbot&quot;&gt;Anatomy of the Chatbot&lt;/h2&gt;
&lt;h3 id=&quot;i-the-brains&quot;&gt;(i). ‘The brains’&lt;/h3&gt;
&lt;p&gt;The chatbot is taught/trained using data in the &lt;strong&gt;data&lt;/strong&gt; folder. It understands a user’s input by learning the various &lt;em&gt;intents&lt;/em&gt; and &lt;em&gt;entities&lt;/em&gt; in the &lt;strong&gt;nlu.md&lt;/strong&gt; file (Please see &lt;a href=&quot;https://rasa.com/docs/rasa/nlu/training-data-format/&quot;&gt;Training Data Format&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;You can add as many &lt;em&gt;intents&lt;/em&gt; as you wish to customise it (e.g. for small talk, customer service, ticket-booking, financial-assistant service, etc). Just be careful to make sure the intents’ respective examples are distinct, and unlikely to be mixed up.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://rasa.com/docs/rasa/core/stories/&quot;&gt;stories&lt;/a&gt; in the &lt;strong&gt;stories.md&lt;/strong&gt; file present the chatbot with sample real-world conversation flows to help it predict the most approprite responses.&lt;/p&gt;

&lt;h3 id=&quot;ii-the-body&quot;&gt;(ii). ‘The body’&lt;/h3&gt;
&lt;p&gt;The skeleton of the chatbot is the &lt;a href=&quot;https://rasa.com/docs/rasa/core/domains/&quot;&gt;domain&lt;/a&gt; in the &lt;strong&gt;domain.yml&lt;/strong&gt; file. It holds all the &lt;em&gt;intents&lt;/em&gt; &amp;amp; &lt;em&gt;entities&lt;/em&gt; the chatbot should know, the &lt;a href=&quot;https://rasa.com/docs/rasa/core/slots/&quot;&gt;slots&lt;/a&gt; and &lt;a href=&quot;https://rasa.com/docs/rasa/core/forms/&quot;&gt;forms&lt;/a&gt; it should store, the list of &lt;a href=&quot;https://rasa.com/docs/rasa/core/actions/&quot;&gt;actions&lt;/a&gt; it can perform, the &lt;a href=&quot;https://rasa.com/docs/rasa/core/responses/&quot;&gt;responses&lt;/a&gt; it can make  and additional configurations.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;credentials.yml&lt;/strong&gt; file has the details for connections to channels other than the command line, e.g. Telegram &amp;amp; Facebook Messenger.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;config.yml&lt;/strong&gt; file defines the &lt;a href=&quot;https://rasa.com/docs/rasa/nlu/choosing-a-pipeline/&quot;&gt;pipeline&lt;/a&gt; and &lt;a href=&quot;https://rasa.com/docs/rasa/core/policies/&quot;&gt;policies&lt;/a&gt; to use to train the chatbot.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;endpoints.yml&lt;/strong&gt; file contains authorisation details for connections to external services e.g. MongoDB or PostgreSQL databases.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;actions.py&lt;/strong&gt; file contains &lt;a href=&quot;https://rasa.com/docs/rasa/core/actions/#id7&quot;&gt;custom actions&lt;/a&gt; written in Python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; some features &lt;em&gt;might&lt;/em&gt; at times appear quite challenging to design and implement (complex custom actions are particularly notorious), but you &lt;em&gt;will&lt;/em&gt; find plenty of help in the &lt;a href=&quot;https://forum.rasa.com/&quot;&gt;Rasa community&lt;/a&gt; and other online forums.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;It’s recommended to go through the official &lt;a href=&quot;https://rasa.com/docs/rasa/&quot;&gt;Rasa Docs&lt;/a&gt;, as they’re the most detailed and up-to-date way of finding out exactly what’s happening behind the scenes, and how to mould your chatbot in line with how you envisioned it.&lt;/p&gt;

&lt;p&gt;If you’d like, you can download and try out a sample chatbot &lt;a href=&quot;https://github.com/Tim-Abwao/rasa-chatbot&quot;&gt;here&lt;/a&gt;. It can tell jokes and random number/date facts, which it collects from online APIs.&lt;/p&gt;</content><author><name>Abwao</name></author><summary type="html">Rasa is an open source Python package with easy-to-use tools for building intelligent text and voice based chatbots. It features several machine learning, natural language processing and natural language understanding tools to produce smart, life-like chatbots.</summary></entry><entry><title type="html">Demand Forecasting For Perishables</title><link href="http://localhost:4000/2019/08/26/Demand-Forecasting-For-Perishables/" rel="alternate" type="text/html" title="Demand Forecasting For Perishables" /><published>2019-08-26T00:00:00+03:00</published><updated>2019-08-26T00:00:00+03:00</updated><id>http://localhost:4000/2019/08/26/Demand-Forecasting-For-Perishables</id><content type="html" xml:base="http://localhost:4000/2019/08/26/Demand-Forecasting-For-Perishables/">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Demand_forecasting&quot;&gt;Demand forecasting&lt;/a&gt; can be described as the use of predictive analytics to determine the &lt;strong&gt;expected demand&lt;/strong&gt; for products or services. It is mostly applied in industries with &lt;strong&gt;volatile products&lt;/strong&gt;, and has the potential to minimise or even completely &lt;strong&gt;eliminate losses&lt;/strong&gt; resulting from spoilt items.&lt;/p&gt;

&lt;h2 id=&quot;perishables-and-their-problems&quot;&gt;Perishables and their problems&lt;/h2&gt;
&lt;p&gt;Perishables are items that have a rather short shelf-life: things like vegetables, fruits, milk, meat and fish, among others. Some may stay fresh for only a few hours. This presents a challenge to grocery stores and supermarkets, who still have to keep them in stock and available to customers.&lt;/p&gt;

&lt;p&gt;Many agriculture - based businesses suffer losses when buyers pick only fresh items, leaving the rest of the ‘wrinkled’ or ‘withered’ ones to go bad. A common tactic employed to curb this behaviour is the lowering of stock volumes to avoid leftovers. But this often badly backfires when customers repeatedly fail to get what they want, and take their business elsewhere.&lt;/p&gt;

&lt;h2 id=&quot;demand-forecasting-to-the-rescue&quot;&gt;Demand Forecasting to the rescue&lt;/h2&gt;
&lt;p&gt;Even with innovative solutions such as advanced preservative packaging, cold-storage facilities, and the operation of in-house delicatessens to consume extra stock; considerable amounts of perishables still wind up as garbage - which begs the question: “Is there a way to reliably tell the ideal amount of inventory?” Demand forecasting attempts to do just that.&lt;/p&gt;

&lt;p&gt;There are plenty of software services in the market today (e.g. &lt;a href=&quot;https://blogs.sap.com/2015/09/27/sap-apo-general-overview/&quot;&gt;APO by SAP&lt;/a&gt;, Oracle® Demantra, &lt;a href=&quot;https://gmdhsoftware.com/demand-planning-software?utm_source=capterra&quot;&gt;GDMH Streamline&lt;/a&gt;, &lt;a href=&quot;https://www.dys.com/demand-planning&quot;&gt;DynaSys&lt;/a&gt;, etc) employing tools such as Time Series Analysis, Machine Learning algorithms and Simulation models to predict just the right amount of perishable goods to stock. Some can even factor in expected ripples in the industry, and thus allow timely intervention.&lt;/p&gt;

&lt;p&gt;If you’d like a case study of Demand Forecasting in action to optimise stocking, &lt;a href=&quot;https://www.kaggle.com/c/favorita-grocery-sales-forecasting&quot;&gt;this Kaggle competition&lt;/a&gt; might be a great place to start.&lt;/p&gt;</content><author><name>Abwao</name></author><summary type="html">Demand forecasting can be described as the use of predictive analytics to determine the expected demand for products or services. It is mostly applied in industries with volatile products, and has the potential to minimise or even completely eliminate losses resulting from spoilt items.</summary></entry></feed>