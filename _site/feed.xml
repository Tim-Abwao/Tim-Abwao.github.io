<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:5000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:5000/" rel="alternate" type="text/html" /><updated>2019-09-05T16:49:58+03:00</updated><id>http://localhost:5000/feed.xml</id><entry><title type="html">Natural Language Processing With Spacy</title><link href="http://localhost:5000/2019/09/05/Natural-Language-Processing-with-SpaCy/" rel="alternate" type="text/html" title="Natural Language Processing With Spacy" /><published>2019-09-05T00:00:00+03:00</published><updated>2019-09-05T00:00:00+03:00</updated><id>http://localhost:5000/2019/09/05/Natural-Language-Processing-with-SpaCy</id><content type="html" xml:base="http://localhost:5000/2019/09/05/Natural-Language-Processing-with-SpaCy/">&lt;p&gt;&lt;a href=&quot;https://spacy.io/&quot;&gt;spaCy&lt;/a&gt; is a powerful, open source Natural Language Processing (NLP) software package built by &lt;a href=&quot;https://explosion.ai/&quot;&gt;Explosions AI&lt;/a&gt;. It’s very handy for processing large volumes of text, and picking out information about the people/places/companies/etc mentioned. It also has wonderful text visualisation tools, demonstrated &lt;a href=&quot;https://explosion.ai/demos/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of it’s &lt;a href=&quot;https://spacy.io/usage/spacy-101#features&quot;&gt;main features&lt;/a&gt; include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tokenization:&lt;/strong&gt; splitting text into pieces (i.e words, numbers, punctuation marks, etc) termed ‘tokens’.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Part-of-Speech Tagging:&lt;/strong&gt; classifying the tokens according to their &lt;em&gt;syntactic functions&lt;/em&gt;, as nouns/verbs/conjunctions/determiners/etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Named Entity Recognition:&lt;/strong&gt; getting the names, places, organisations, dates, events, landmark structures, nationalities, languages, etc. in the text. Please see &lt;a href=&quot;https://spacy.io/api/annotation#named-entities&quot;&gt;Named Entities&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sentiment Analysis:&lt;/strong&gt; gives a positivity/negativity score of a phrase/sentence/document.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Lemmatization:&lt;/strong&gt; getting the root/base form of the tokens, without inflections for tense/plural/case/gender/ etc. This allows words like ‘was’ and ‘be’ to be interpreted as similar.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dependency Parsing:&lt;/strong&gt; getting the grammatical structure i.e relationships between the tokens in terms of ‘subject’ or ‘object’ in the given contexts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sentence Boundary Detection:&lt;/strong&gt; getting the sentences in the text (grouping together tokens that make up individual sentences by identifying where sentences begin and end).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and many more.&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Installation instructions for the various OS platforms can be found at &lt;a href=&quot;https://spacy.io/usage&quot;&gt;spaCy’s usage guide&lt;/a&gt;. (&lt;strong&gt;Note:&lt;/strong&gt; On &lt;em&gt;Windows&lt;/em&gt; OS, installing spaCy with pip requires you to have a Microsoft Visual C++ Compiler installed. You can get it &lt;a href=&quot;https://visualstudio.microsoft.com/visual-cpp-build-tools/&quot;&gt;here&lt;/a&gt;, or you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;conda&lt;/code&gt; instead)&lt;/p&gt;

&lt;p&gt;Spacy has its very own &lt;a href=&quot;https://course.spacy.io&quot;&gt;Advanced NLP with spaCy course&lt;/a&gt; that introduces and explains its various features; and even includes practice sessions to see them in action. It’s the best way to learn what spaCy is all about.&lt;/p&gt;

&lt;p&gt;If you wish, you can download and try out a &lt;a href=&quot;https://github.com/Tim-Abwao/spaCy-Text-App&quot;&gt;simple NLP app&lt;/a&gt; I’d made using &lt;em&gt;spaCy&lt;/em&gt;.&lt;/p&gt;</content><author><name>Abwao</name></author><summary type="html">spaCy is a powerful, open source Natural Language Processing (NLP) software package built by Explosions AI. It’s very handy for processing large volumes of text, and picking out information about the people/places/companies/etc mentioned. It also has wonderful text visualisation tools, demonstrated here.</summary></entry><entry><title type="html">Create A Simple Chatbot</title><link href="http://localhost:5000/2019/08/28/Create-a-Simple-Chatbot/" rel="alternate" type="text/html" title="Create A Simple Chatbot" /><published>2019-08-28T00:00:00+03:00</published><updated>2019-08-28T00:00:00+03:00</updated><id>http://localhost:5000/2019/08/28/Create-a-Simple-Chatbot</id><content type="html" xml:base="http://localhost:5000/2019/08/28/Create-a-Simple-Chatbot/">&lt;p&gt;&lt;a href=&quot;https://rasa.com/&quot; target=&quot;_blank&quot;&gt;Rasa&lt;/a&gt; is an &lt;a href=&quot;https://opensource.com/resources/what-open-source&quot; target=&quot;_blank&quot;&gt;open source&lt;/a&gt; software with user-friendly tools to design, train and build intelligent chatbots.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;This simple &lt;a href=&quot;https://rasa.com/docs/getting-started/&quot;&gt;getting started guide&lt;/a&gt; will take you through the installation process, and even create a chatbot (Rasa project) that you can try out right away. The &lt;a href=&quot;https://rasa.com/docs/rasa/user-guide/rasa-tutorial/&quot;&gt;Rasa Tutorial&lt;/a&gt; is the best way to get acquainted with how Rasa works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please check out the &lt;a href=&quot;https://rasa.com/docs/rasa/user-guide/installation/#installation-guide&quot;&gt;Installation guide&lt;/a&gt; for platform-specific dependencies (e.g. if you’re using &lt;strong&gt;Windows&lt;/strong&gt;, you’ll need to have the Microsoft VC++ Compiler installed beforehand, or else the Rasa installation will fail).&lt;/p&gt;

&lt;h3 id=&quot;modifying-the-chatbot&quot;&gt;Modifying the Chatbot&lt;/h3&gt;
&lt;p&gt;You can give the chatbot a unique personality by editing the files in the Rasa Project.&lt;/p&gt;

&lt;p&gt;First the brains: The chatbot is ‘taught’ using training data in the &lt;strong&gt;data&lt;/strong&gt; directory/folder. It understands a user’s input by ‘learning’ the various &lt;em&gt;intents&lt;/em&gt; and &lt;em&gt;entities&lt;/em&gt; in the &lt;strong&gt;nlu.md&lt;/strong&gt; file (Please see &lt;a href=&quot;https://rasa.com/docs/rasa/nlu/training-data-format/&quot;&gt;Training Data Format&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;You can add as many &lt;em&gt;intents&lt;/em&gt; as you wish to customise it (e.g. for small talk, customer service, ticket-booking, financial-assistant service, etc) - just be careful to make sure the intents’ respective examples are distinct, so that the chatbot doesn’t mix them up.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;stories&lt;/em&gt; in the &lt;strong&gt;stories.md&lt;/strong&gt; file present the chatbot with sample conversation flows, teaching it how real-world conversations would go, and helping it predict the most approprite responses (Please see &lt;a href=&quot;https://rasa.com/docs/rasa/core/stories/&quot;&gt;Stories&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The body/skelleton of the chatbot is the &lt;em&gt;domain&lt;/em&gt; file - &lt;strong&gt;domain.yml&lt;/strong&gt;. It assembles all the &lt;em&gt;intents&lt;/em&gt; &amp;amp; &lt;em&gt;entities&lt;/em&gt; the chatbot should know, the &lt;em&gt;slots&lt;/em&gt; and &lt;em&gt;forms&lt;/em&gt; it should store, the &lt;em&gt;actions&lt;/em&gt; it can take and the &lt;em&gt;templates&lt;/em&gt; (things it can say). Please see &lt;a href=&quot;https://rasa.com/docs/rasa/core/domains/&quot;&gt;Domains&lt;/a&gt;, &lt;a href=&quot;https://rasa.com/docs/rasa/core/slots/&quot;&gt;Slots&lt;/a&gt; and &lt;a href=&quot;https://rasa.com/docs/rasa/core/forms/&quot;&gt;Forms&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For adjustments to the &lt;strong&gt;endpoints.yml&lt;/strong&gt;, &lt;strong&gt;config.yml&lt;/strong&gt;, &lt;strong&gt;credentials.yml&lt;/strong&gt;, &lt;strong&gt;actions.py&lt;/strong&gt; and any other files, I’d recommend taking some time to go through the &lt;a href=&quot;https://rasa.com/docs/rasa/&quot;&gt;Rasa Docs&lt;/a&gt;. They’re really good, and well detailed. It’s the best way to find out exactly what’s happening behind the scenes, and discover how to mould the chatbot in line with how you envisioned it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; some features &lt;em&gt;might&lt;/em&gt; at times appear quite challenging to design and implement (custom actions are particularly notorious), but you &lt;em&gt;will&lt;/em&gt; find plenty of help in online forums.&lt;/p&gt;

&lt;p&gt;If you’d like, you can download a sample chatbot I had made &lt;a href=&quot;https://github.com/Tim-Abwao/rasa-chatbot&quot;&gt;here&lt;/a&gt;. It uses internet APIs to tell jokes and random number/date facts.&lt;/p&gt;</content><author><name>Abwao</name></author><summary type="html">Rasa is an open source software with user-friendly tools to design, train and build intelligent chatbots.</summary></entry><entry><title type="html">Demand Forecasting For Perishables</title><link href="http://localhost:5000/2019/08/26/Demand-Forecasting-For-Perishables/" rel="alternate" type="text/html" title="Demand Forecasting For Perishables" /><published>2019-08-26T00:00:00+03:00</published><updated>2019-08-26T00:00:00+03:00</updated><id>http://localhost:5000/2019/08/26/Demand-Forecasting-For-Perishables</id><content type="html" xml:base="http://localhost:5000/2019/08/26/Demand-Forecasting-For-Perishables/">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Demand_forecasting&quot; target=&quot;_blank&quot;&gt;Demand forecasting&lt;/a&gt; “tries to understand and predict customer demand” so as to “optimize supply decisions”. It has the potential to minimise, and even completely eliminate losses resulting from spoilt items.&lt;/p&gt;

&lt;p&gt;Perishable goods are often defined as items that have a short shelf-life: things like vegetables, fruits, milk, meat and fish, among others. Some can stay fresh for only a few hours, but grocery stores and supermarkets have to keep them in stock and available to customers.&lt;/p&gt;

&lt;p&gt;Many such businesses suffer loss when buyers pick only fresh items, leaving the rest of the ‘aged’ ones to go bad. A common tactic employed to curb this practice is the lowering of stock volumes, to avoid leftovers. But this badly backfires when customers fail to get what they want, and take their business elsewhere.&lt;/p&gt;

&lt;p&gt;Even with modern innovative solutions such as advanced preservative packaging, cold-storage facilities, and the operation of in-house delicatessens to consume extra stock, considerable amounts of perishables eventually go bad and end up as garbage. Incorporating a demand forecasting mechanism can take this loss minimisation a step further.&lt;/p&gt;

&lt;p&gt;There are plenty of software packages in the market today (e.g. &lt;a href=&quot;https://blogs.sap.com/2015/09/27/sap-apo-general-overview/&quot; target=&quot;_blank&quot;&gt;APO by SAP&lt;/a&gt;, Oracle® Demantra, &lt;a href=&quot;https://gmdhsoftware.com/demand-planning-software?utm_source=capterra&quot; target=&quot;_blank&quot;&gt;GDMH Streamline&lt;/a&gt;, &lt;a href=&quot;https://www.dys.com/demand-planning&quot; target=&quot;_blank&quot;&gt;DynaSys&lt;/a&gt;, etc) employing tools such as Time Series Analysis, Machine Learning algorithms and Simulation models to predict just the right amount of perishable goods to stock. Some can even factor in expected ripples in the industry, and thus allow timely intervention.&lt;/p&gt;

&lt;p&gt;If you wish, (and have some experience or interest in computer programming languages) you can make your own demand forecasting model and experiment with it. &lt;a href=&quot;https://www.kaggle.com/c/favorita-grocery-sales-forecasting&quot; target=&quot;_blank&quot;&gt;This Kaggle competition&lt;/a&gt; might be a great place to get started.&lt;/p&gt;</content><author><name>Abwao</name></author><summary type="html">Demand forecasting “tries to understand and predict customer demand” so as to “optimize supply decisions”. It has the potential to minimise, and even completely eliminate losses resulting from spoilt items.</summary></entry></feed>